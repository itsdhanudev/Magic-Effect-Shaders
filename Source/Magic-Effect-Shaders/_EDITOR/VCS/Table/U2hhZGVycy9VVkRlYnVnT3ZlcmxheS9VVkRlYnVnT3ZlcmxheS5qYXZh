{"dateModified":1761847193000,"fileData":"package JAVARuntime;\n\nimport java.util.*;\n\npublic class UVDebugOverlay extends MaterialShader {\n\n    public float intensity \u003d 1.0f;\n    public Texture texture;\n\n    private Shader shader;\n\n    @Override\n    public String getShaderName() {\n        return \"CustomShaders/UVDebugOverlay\";\n    }\n\n    @Override\n    public float getMinimalSupportedOGL() {\n        return MaterialShader.OGL3;\n    }\n\n    @Override\n    void start() {\n        Shader.Builder builder \u003d new Shader.Builder();\n        builder.createProgram();\n\n        VertexShader vs \u003d VertexShader.loadFile(this, \"UVDebugOverlayVertex\");\n        FragmentShader fs \u003d FragmentShader.loadFile(this, \"UVDebugOverlayFragment\");\n\n        builder.setVertexCode(vs);\n        builder.setFragmentCode(fs);\n\n        builder.compileVertex();\n        builder.compileFragment();\n        shader \u003d builder.create();\n    }\n\n    @Override\n    void render(OGLES ogles, Camera camera, MSRenderData renderData) {\n        if (shader \u003d\u003d null) return;\n\n        OGLES3 ogl \u003d (OGLES3) ogles;\n        ogl.setIgnoreAttributeException(true);\n        ogl.withShader(shader);\n\n        ogl.uniformMatrix4(\"viewMatrix\", camera.getViewMatrix());\n        ogl.uniformMatrix4(\"projectionMatrix\", camera.getProjectionMatrix());\n        ogl.uniformFloat(\"u_Intensity\", intensity);\n\n        if (Texture.isRenderable(texture)) {\n            ogl.uniformTexture(\"u_MainTex\", texture);\n        } else {\n            ogl.uniformTexture(\"u_MainTex\", Texture.white());\n        }\n\n        for (int rv \u003d 0; rv \u003c renderData.vertexCount(); rv++) {\n            RenderableVertex rVertex \u003d renderData.renderableVertexAt(rv);\n            Vertex vertex \u003d rVertex.vertex;\n\n            if (rVertex.objectCount() \u003e 0) {\n                applyVertexAttributes(vertex, ogl);\n\n                for (int ro \u003d 0; ro \u003c rVertex.objectCount(); ro++) {\n                    RenderableObject rObject \u003d rVertex.objectAt(ro);\n                    if (rObject.isVisibleByCamera()) {\n                        ogl.uniformMatrix4(\"modelMatrix\", rObject.getRenderMatrix());\n                        ogl.drawTriangles(vertex.getTrianglesBuffer());\n                    }\n                }\n            }\n        }\n\n        ogl.releaseAttributes();\n        ogl.releaseShader();\n    }\n\n    private void applyVertexAttributes(Vertex vertex, OGLES ogl) {\n        if (vertex.getVerticesBuffer() !\u003d null)\n            ogl.attributeVector3(\"position\", vertex.getVerticesBuffer());\n        if (vertex.getUVsBuffer() !\u003d null)\n            ogl.attributeVector2(\"texCoord\", vertex.getUVsBuffer());\n    }\n}\n","fileSizeBytes":2563}