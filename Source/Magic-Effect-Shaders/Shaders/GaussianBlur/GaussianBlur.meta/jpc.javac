
 //[I-S]LN=1;[I-E]
import java.util.*; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
class GaussianBlur extends MaterialShader { //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
  public Color color = new Color(255, 255, 255); //[I-S]LN=6;[I-E]
  public Texture texture; //[I-S]LN=7;[I-E]
  public float radius = 5.0f; //[I-S]LN=8;[I-E]
  public float sigma = 2.0f; //[I-S]LN=9;[I-E]
  public float resolution = 512.0f; //[I-S]LN=10;[I-E]
  public float intensity = 1.0f; //[I-S]LN=11;[I-E]
  public float directionX = 1.0f; //[I-S]LN=12;[I-E]
  public float directionY = 0.0f; //[I-S]LN=13;[I-E]
  public float iteration = 1.0f; //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
  private Shader shader; //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
  @Override //[I-S]LN=18;[I-E]
  public String getShaderName() { //[I-S]LN=19;[I-E]
    return "CustomShaders/GaussianBlur"; //[I-S]LN=20;[I-E]
  } //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
  @Override //[I-S]LN=23;[I-E]
  public float getMinimalSupportedOGL() { //[I-S]LN=24;[I-E]
    return MaterialShader.OGL3; //[I-S]LN=25;[I-E]
  } //[I-S]LN=26;[I-E]
 //[I-S]LN=27;[I-E]
  @Override //[I-S]LN=28;[I-E]
  void start() { //[I-S]LN=29;[I-E]
    Shader.Builder builder = new Shader.Builder(); //[I-S]LN=30;[I-E]
    builder.createProgram(); //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
    VertexShader vs = VertexShader.loadFile(this, "GaussianBlurVertex"); //[I-S]LN=33;[I-E]
    FragmentShader fs = FragmentShader.loadFile(this, "GaussianBlurFragment"); //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
    builder.setVertexCode(vs); //[I-S]LN=36;[I-E]
    builder.setFragmentCode(fs); //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
    builder.compileVertex(); //[I-S]LN=39;[I-E]
    builder.compileFragment(); //[I-S]LN=40;[I-E]
    shader = builder.create(); //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  @Override //[I-S]LN=44;[I-E]
  void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN=45;[I-E]
    if (shader == null) return; //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
    OGLES3 ogl = (OGLES3) ogles; //[I-S]LN=48;[I-E]
    ogl.setIgnoreAttributeException(true); //[I-S]LN=49;[I-E]
    ogl.withShader(shader); //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
    ogl.uniformMatrix4("viewMatrix", camera.getViewMatrix()); //[I-S]LN=52;[I-E]
    ogl.uniformMatrix4("projectionMatrix", camera.getProjectionMatrix()); //[I-S]LN=53;[I-E]
    ogl.uniformColor("diffuse", color); //[I-S]LN=54;[I-E]
    ogl.uniformFloat("u_Radius", radius); //[I-S]LN=55;[I-E]
    ogl.uniformFloat("u_Sigma", sigma); //[I-S]LN=56;[I-E]
    ogl.uniformFloat("u_Resolution", resolution); //[I-S]LN=57;[I-E]
    ogl.uniformFloat("u_Intensity", intensity); //[I-S]LN=58;[I-E]
    ogl.uniformFloat("u_DirectionX", directionX); //[I-S]LN=59;[I-E]
    ogl.uniformFloat("u_DirectionY", directionY); //[I-S]LN=60;[I-E]
    ogl.uniformFloat("u_Iteration", iteration); //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
    if (Texture.isRenderable(texture)) { //[I-S]LN=63;[I-E]
      ogl.uniformTexture("u_MainTex", texture); //[I-S]LN=64;[I-E]
    } else { //[I-S]LN=65;[I-E]
      ogl.uniformTexture("u_MainTex", Texture.white()); //[I-S]LN=66;[I-E]
    } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
    for (int rv = 0; rv < renderData.vertexCount(); rv++) { //[I-S]LN=69;[I-E]
      RenderableVertex rVertex = renderData.renderableVertexAt(rv); //[I-S]LN=70;[I-E]
      Vertex vertex = rVertex.vertex; //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
      if (rVertex.objectCount() > 0) { //[I-S]LN=73;[I-E]
        applyVertexAttributes(vertex, ogl); //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
        for (int ro = 0; ro < rVertex.objectCount(); ro++) { //[I-S]LN=76;[I-E]
          RenderableObject rObject = rVertex.objectAt(ro); //[I-S]LN=77;[I-E]
          if (rObject.isVisibleByCamera()) { //[I-S]LN=78;[I-E]
            ogl.uniformMatrix4("modelMatrix", rObject.getRenderMatrix()); //[I-S]LN=79;[I-E]
            ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN=80;[I-E]
          } //[I-S]LN=81;[I-E]
        } //[I-S]LN=82;[I-E]
      } //[I-S]LN=83;[I-E]
    } //[I-S]LN=84;[I-E]
 //[I-S]LN=85;[I-E]
    ogl.releaseAttributes(); //[I-S]LN=86;[I-E]
    ogl.releaseShader(); //[I-S]LN=87;[I-E]
  } //[I-S]LN=88;[I-E]
 //[I-S]LN=89;[I-E]
  private void applyVertexAttributes(Vertex vertex, OGLES ogl) { //[I-S]LN=90;[I-E]
    if (vertex.getVerticesBuffer() != null) ogl.attributeVector3("position", vertex.getVerticesBuffer()); //[I-S]LN=91;[I-E]
    if (vertex.getUVsBuffer() != null) ogl.attributeVector2("texCoord", vertex.getUVsBuffer()); //[I-S]LN=92;[I-E]
  } //[I-S]LN=93;[I-E]
} //[I-S]LN=94;[I-E]