{"autoCompleteData":{"varMap":{}},"compiledCode":["package JAVARuntime;","","import java.util.*; //[I-S]LN\u003d2;[I-E]","import java.util.concurrent.*;","import java.util.concurrent.atomic.*;","import java.util.concurrent.locks.*;","import java.util.function.*;","import java.util.regex.*;","import java.util.stream.*;","import java.util.zip.*;","import java.text.*;","import java.net.*;","import java.math.*;","import java.io.*;","import java.nio.*;","import java.time.*;","import java.time.chrono.*;","import java.time.format.*;","import java.time.temporal.*;","import java.time.zone.*;","","","","public class _JContainer{}","","//C-R:LensFlare",""," //[I-S]LN\u003d1;[I-E]"," //[I-S]LN\u003d3;[I-E]","class LensFlare extends MaterialShader { //[I-S]LN\u003d4;[I-E]"," //[I-S]LN\u003d5;[I-E]","    public Color tint \u003d new Color(255, 200, 150); //[I-S]LN\u003d6;[I-E]","    public Texture texture; //[I-S]LN\u003d7;[I-E]","    public float intensity \u003d 1.5f; //[I-S]LN\u003d8;[I-E]","    public float threshold \u003d 0.7f; //[I-S]LN\u003d9;[I-E]","    public float flareLength \u003d 0.3f; //[I-S]LN\u003d10;[I-E]","    public float haloStrength \u003d 0.5f; //[I-S]LN\u003d11;[I-E]","    public float streakStrength \u003d 0.8f; //[I-S]LN\u003d12;[I-E]","    public float distortion \u003d 0.4f; //[I-S]LN\u003d13;[I-E]","    public float resolution \u003d 512.0f; //[I-S]LN\u003d14;[I-E]"," //[I-S]LN\u003d15;[I-E]","    private Shader shader; //[I-S]LN\u003d16;[I-E]"," //[I-S]LN\u003d17;[I-E]","    @Override //[I-S]LN\u003d18;[I-E]","    public String getShaderName() { //[I-S]LN\u003d19;[I-E]","        return \"CustomShaders/LensFlare\"; //[I-S]LN\u003d20;[I-E]","    } //[I-S]LN\u003d21;[I-E]"," //[I-S]LN\u003d22;[I-E]","    @Override //[I-S]LN\u003d23;[I-E]","    public float getMinimalSupportedOGL() { //[I-S]LN\u003d24;[I-E]","        return MaterialShader.OGL3; //[I-S]LN\u003d25;[I-E]","    } //[I-S]LN\u003d26;[I-E]"," //[I-S]LN\u003d27;[I-E]","    @Override //[I-S]LN\u003d28;[I-E]","public     void start() { //[I-S]LN\u003d29;[I-E]","        Shader.Builder builder \u003d new Shader.Builder(); //[I-S]LN\u003d30;[I-E]","        builder.createProgram(); //[I-S]LN\u003d31;[I-E]"," //[I-S]LN\u003d32;[I-E]","        VertexShader vs \u003d VertexShader.loadFile(this, \"LensFlareVertex\"); //[I-S]LN\u003d33;[I-E]","        FragmentShader fs \u003d FragmentShader.loadFile(this, \"LensFlareFragment\"); //[I-S]LN\u003d34;[I-E]"," //[I-S]LN\u003d35;[I-E]","        builder.setVertexCode(vs); //[I-S]LN\u003d36;[I-E]","        builder.setFragmentCode(fs); //[I-S]LN\u003d37;[I-E]"," //[I-S]LN\u003d38;[I-E]","        builder.compileVertex(); //[I-S]LN\u003d39;[I-E]","        builder.compileFragment(); //[I-S]LN\u003d40;[I-E]","        shader \u003d builder.create(); //[I-S]LN\u003d41;[I-E]","    } //[I-S]LN\u003d42;[I-E]"," //[I-S]LN\u003d43;[I-E]","    @Override //[I-S]LN\u003d44;[I-E]","public     void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN\u003d45;[I-E]","        if (shader \u003d\u003d null) return; //[I-S]LN\u003d46;[I-E]"," //[I-S]LN\u003d47;[I-E]","        OGLES3 ogl \u003d (OGLES3) ogles; //[I-S]LN\u003d48;[I-E]","        ogl.setIgnoreAttributeException(true); //[I-S]LN\u003d49;[I-E]","        ogl.withShader(shader); //[I-S]LN\u003d50;[I-E]"," //[I-S]LN\u003d51;[I-E]","        ogl.uniformMatrix4(\"viewMatrix\", camera.getViewMatrix()); //[I-S]LN\u003d52;[I-E]","        ogl.uniformMatrix4(\"projectionMatrix\", camera.getProjectionMatrix()); //[I-S]LN\u003d53;[I-E]","        ogl.uniformColor(\"u_Tint\", tint); //[I-S]LN\u003d54;[I-E]","        ogl.uniformFloat(\"u_Intensity\", intensity); //[I-S]LN\u003d55;[I-E]","        ogl.uniformFloat(\"u_Threshold\", threshold); //[I-S]LN\u003d56;[I-E]","        ogl.uniformFloat(\"u_FlareLength\", flareLength); //[I-S]LN\u003d57;[I-E]","        ogl.uniformFloat(\"u_HaloStrength\", haloStrength); //[I-S]LN\u003d58;[I-E]","        ogl.uniformFloat(\"u_StreakStrength\", streakStrength); //[I-S]LN\u003d59;[I-E]","        ogl.uniformFloat(\"u_Distortion\", distortion); //[I-S]LN\u003d60;[I-E]","        ogl.uniformFloat(\"u_Resolution\", resolution); //[I-S]LN\u003d61;[I-E]"," //[I-S]LN\u003d62;[I-E]","        if (Texture.isRenderable(texture)) { //[I-S]LN\u003d63;[I-E]","            ogl.uniformTexture(\"u_MainTex\", texture); //[I-S]LN\u003d64;[I-E]","        } else { //[I-S]LN\u003d65;[I-E]","            ogl.uniformTexture(\"u_MainTex\", Texture.white()); //[I-S]LN\u003d66;[I-E]","        } //[I-S]LN\u003d67;[I-E]"," //[I-S]LN\u003d68;[I-E]","        for (int rv \u003d 0; rv \u003c renderData.vertexCount(); rv++) { //[I-S]LN\u003d69;[I-E]","            RenderableVertex rVertex \u003d renderData.renderableVertexAt(rv); //[I-S]LN\u003d70;[I-E]","Vertex vertex \u003d rVertex.getVertex(); //[I-S]LN\u003d71;[I-E]","            if (rVertex.objectCount() \u003e 0) { //[I-S]LN\u003d72;[I-E]","                applyVertexAttributes(vertex, ogl); //[I-S]LN\u003d73;[I-E]","                for (int ro \u003d 0; ro \u003c rVertex.objectCount(); ro++) { //[I-S]LN\u003d74;[I-E]","                    RenderableObject rObject \u003d rVertex.objectAt(ro); //[I-S]LN\u003d75;[I-E]","                    if (rObject.isVisibleByCamera()) { //[I-S]LN\u003d76;[I-E]","                        ogl.uniformMatrix4(\"modelMatrix\", rObject.getRenderMatrix()); //[I-S]LN\u003d77;[I-E]","                        ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN\u003d78;[I-E]","                    } //[I-S]LN\u003d79;[I-E]","                } //[I-S]LN\u003d80;[I-E]","            } //[I-S]LN\u003d81;[I-E]","        } //[I-S]LN\u003d82;[I-E]"," //[I-S]LN\u003d83;[I-E]","        ogl.releaseAttributes(); //[I-S]LN\u003d84;[I-E]","        ogl.releaseShader(); //[I-S]LN\u003d85;[I-E]","    } //[I-S]LN\u003d86;[I-E]"," //[I-S]LN\u003d87;[I-E]","    private void applyVertexAttributes(Vertex vertex, OGLES ogl) { //[I-S]LN\u003d88;[I-E]","        if (vertex.getVerticesBuffer() !\u003d null) //[I-S]LN\u003d89;[I-E]","            ogl.attributeVector3(\"position\", vertex.getVerticesBuffer()); //[I-S]LN\u003d90;[I-E]","        if (vertex.getUVsBuffer() !\u003d null) //[I-S]LN\u003d91;[I-E]","            ogl.attributeVector2(\"texCoord\", vertex.getUVsBuffer()); //[I-S]LN\u003d92;[I-E]","    } //[I-S]LN\u003d93;[I-E]","} //[I-S]LN\u003d94;[I-E]"],"originalFileName":"_JContainer.java","referencedClasses":[],"referencesUpdatedV2":true}